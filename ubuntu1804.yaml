# This YAML input is used to create JSON configuration for Packer.
---
variables:
  cpus: "2"
  disk_size_mb: "81920"
  # Set to "false" to get more diagnostic information.
  # Defaults to false because I prefer to see what's going on, and not have
  # to wonder if it's hanging.
  headless: "false"
  memory_mb: "512"
  vm_name: "packer-ubuntu1804"

  # VMware
  boot_key_interval: 100ms
  # VirtualBox
  boot_keygroup_interval: 100ms
  skip_export: "false" # When enabled, Packer will not export the VM (to OVF format)

  ansible_playbook_file: "ansible/main.yml"
  ansible_galaxy_file: "ansible/requirements.yml"
  ansible_staging_directory: "/opt/packer-ansible"

  cleanup_remove_ansible: "false"
  # Set to "true" to zero out free space on the root partition (takes a while)
  cleanup_zero_free: "true"


provisioners:
- type: shell
  execute_command: echo 'vagrant' | {{.Vars}} sudo -S -E bash '{{.Path}}'
  environment_vars:
  - "ANSIBLE_STAGING_DIRECTORY={{user `ansible_staging_directory`}}"
  scripts:
    - scripts/install_ansible.sh
    - scripts/setup_debian.sh

- type: ansible-local
  # Copy the entire directory instead of just the playbook file
  playbook_dir: "ansible"
  playbook_file: "{{user `ansible_playbook_file`}}"
  galaxy_file: "{{user `ansible_galaxy_file`}}"
  staging_directory: "{{user `ansible_staging_directory`}}"

# Zeroes free space to make the image smaller. Disable for now, because it's slow.
- type: shell
  execute_command: echo 'vagrant' | {{.Vars}} sudo -S -E bash '{{.Path}}'
  environment_vars:
    - "REMOVE_ANSIBLE={{user `cleanup_remove_ansible`}}"
    - "ZERO_FREE={{user `cleanup_zero_free`}}"
  script: scripts/cleanup.sh

# These settings are shared by all builders.
# The generation script will merge this info into each of the builder definitions.
_builder_common: &builder_common_options
  "boot_command":
    - "<esc><wait>"
    - "<esc><wait>"
    - "<enter><wait>"
    - "/install/vmlinuz<wait>"
    - " auto<wait>"
    - " console-setup/ask_detect=false<wait>"
    - " console-setup/layoutcode=us<wait>"
    - " console-setup/modelcode=pc105<wait>"
    - " debconf/frontend=noninteractive<wait>"
    - " debian-installer=en_US<wait>"
    - " fb=false<wait>"
    - " initrd=/install/initrd.gz<wait>"
    - " kbd-chooser/method=us<wait>"
    - " keyboard-configuration/layout=USA<wait>"
    - " keyboard-configuration/variant=USA<wait>"
    - " locale=en_US<wait>"
    - " netcfg/get_domain=vm<wait>"
    - " netcfg/get_hostname=vagrant<wait>"
    - " grub-installer/bootdev=/dev/sda<wait>"
    - " noapic<wait>"
    - " preseed/url=http://{{ .HTTPIP }}:{{ .HTTPPort }}/preseed.cfg<wait>"
    - " -- <wait>"
    - "<enter><wait>"
  boot_wait: 10s
  disk_size: "{{user `disk_size_mb`}}"
  headless: "{{user `headless`}}"
  http_directory: http
  iso_urls:
  - "iso/ubuntu-18.04.1-server-amd64.iso"
  - "http://cdimage.ubuntu.com/ubuntu/releases/bionic/release/ubuntu-18.04.1-server-amd64.iso"
  iso_checksum_type: sha256
  iso_checksum: a5b0ea5918f850124f3d72ef4b85bda82f0fcd02ec721be19c1a6952791c8ee8
  ssh_username: vagrant
  ssh_password: vagrant
  ssh_port: 22
  ssh_wait_timeout: 10000s
  shutdown_command: echo 'vagrant'|sudo -S /sbin/halt -h -p
  vm_name: '{{user `vm_name`}}'
  #output_directory: "output-{{build_type}}/{{user `vm_name`}}"
  output_directory: "{{user `vm_name`}}-{{build_type}}"

builders:
# https://www.packer.io/docs/builders/virtualbox-iso.html
- type: virtualbox-iso
  <<: *builder_common_options
  guest_os_type: Ubuntu_64
  guest_additions_path: VBoxGuestAdditions_{{.Version}}.iso
  virtualbox_version_file: .vbox_version
  boot_keygroup_interval: "{{user `boot_keygroup_interval`}}"
  skip_export: "{{user `skip_export`}}"
  vboxmanage:
  - [modifyvm, '{{.Name}}', --memory, '{{user `memory_mb`}}']
  - [modifyvm, '{{.Name}}', --cpus, '{{user `cpus`}}']

# https://www.packer.io/docs/builders/vmware-iso.html
- type: vmware-iso
  <<: *builder_common_options
  # Find the right value in the VMX file, under the key "guestOS"
  guest_os_type: ubuntu-64
  tools_upload_flavor: linux
  skip_compaction: false
  boot_key_interval: "{{user `boot_key_interval`}}"
  vmx_data:
    cpuid.coresPerSocket: '{{user `cpus`}}'
    memsize: '{{user `memory_mb`}}'
    numvcpus: '1'
